openapi: 3.0.0
paths:
  "/organizations/{id}":
    get:
      operationId: OrganizationsController_findOne
      summary: Retrieve an organization by ID or Clerk ID.
      parameters:
        - name: id
          required: true
          in: path
          description: ID or Clerk ID of the organization.
          schema:
            type: string
      responses:
        "200":
          description: The organization has been retrieved.
        "404":
          description: Organization not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Organizations
      security:
        - bearer: []
    patch:
      operationId: OrganizationsController_update
      summary: Update the details of a specified organization.
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the organization.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrganizationDto"
      responses:
        "200":
          description: Organization updated successfully.
        "400":
          description: Invalid input data.
        "404":
          description: Organization not found.
      tags:
        - Organizations
      security:
        - bearer: []
  "/organizations/{id}/payment-group-settings":
    get:
      operationId: OrganizationsController_findPaymentGroupSettings
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - Organizations
      security:
        - bearer: []
    patch:
      operationId: OrganizationsController_updatePaymentGroupSettings
      summary: Update an organization by ID.
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the organization.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentGroupSettingsDto"
      responses:
        "200":
          description: The organization has been updated.
        "400":
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "404":
          description: Organization not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Organizations
      security:
        - bearer: []
  "/organizations/{id}/checkout-settings":
    get:
      operationId: OrganizationsController_findCheckoutSettings
      summary: Retrieve checkout settings for a specified organization ID.
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the organization.
          schema:
            type: string
      responses:
        "200":
          description: Checkout settings retrieved successfully.
        "404":
          description: Organization or checkout settings not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Organizations
      security:
        - bearer: []
    patch:
      operationId: OrganizationsController_updateCheckoutSettings
      summary: Update checkout settings for a specified organization ID.
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the organization.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCheckoutSettingsDto"
      responses:
        "200":
          description: Checkout settings updated successfully.
        "400":
          description: Invalid input data.
        "404":
          description: Organization or checkout settings not found.
      tags:
        - Organizations
      security:
        - bearer: []
  /payment-intents:
    post:
      operationId: PaymentIntentsController_create
      summary: Create a new Payment Intent
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentIntentDto"
      responses:
        "201":
          description: The Payment Intent has been successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePaymentIntentDto"
        "400":
          description: Invalid input data.
      tags:
        - PaymentIntents
      security:
        - bearer: []
    get:
      operationId: PaymentIntentsController_findAll
      summary: Retrieve all Payment Intents
      parameters: []
      responses:
        "200":
          description: List of Payment Intents.
      tags:
        - PaymentIntents
      security:
        - bearer: []
  "/payment-intents/{id}":
    get:
      operationId: PaymentIntentsController_findOne
      summary: Retrieve a Payment Intent by ID
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the Payment Intent to fetch
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified Payment Intent.
        "400":
          description: Invalid ID supplied.
      tags:
        - PaymentIntents
      security:
        - bearer: []
  "/payment-intents/{id}/cancel":
    post:
      operationId: PaymentIntentsController_cancel
      summary: Cancel a Payment Intent by ID
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the Payment Intent to cancel
          schema:
            type: string
      responses:
        "200":
          description: The specified Payment Intent has been canceled.
        "400":
          description: Invalid ID supplied.
      tags:
        - PaymentIntents
      security:
        - bearer: []
        - bearer: []
  /payment-groups:
    post:
      operationId: PaymentGroupsController_create
      summary: Create a new payment group
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentGroupDto"
      responses:
        "201":
          description: The payment group has been successfully created.
        "400":
          description: "Invalid input, unable to create the payment group."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
    get:
      operationId: PaymentGroupsController_findAll
      summary: Retrieve all payment groups
      parameters: []
      responses:
        "200":
          description: Successfully retrieved the payment groups.
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
  "/payment-groups/{id}":
    get:
      operationId: PaymentGroupsController_findOne
      summary: Retrieve a payment group by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved the payment group.
        "404":
          description: No payment group found for the provided id.
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
    patch:
      operationId: PaymentGroupsController_update
      summary: Update a payment group by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentGroupDto"
      responses:
        "200":
          description: Successfully updated the payment group.
        "400":
          description: "Invalid input, unable to update the payment group."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
  "/payment-groups/{id}/participants":
    get:
      operationId: PaymentGroupsController_participants
      summary: Retrieve participants of a payment group by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved the participants.
        "404":
          description: No participants found for the provided payment group id.
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
  "/payment-groups/{id}/cancel":
    post:
      operationId: PaymentGroupsController_cancel
      summary: Cancel a payment group by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Successfully canceled the payment group.
        "400":
          description: "Invalid request, unable to cancel the payment group."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
  "/payment-groups/{id}/expire":
    post:
      operationId: PaymentGroupsController_expire
      summary: Expire a payment group by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Successfully expired the payment group.
        "400":
          description: "Invalid request, unable to expire the payment group."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
  "/payment-groups/{id}/validate":
    post:
      operationId: PaymentGroupsController_validate
      summary: Validate a payment group by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidatePaymentGroupDto"
      responses:
        "200":
          description: Successfully validated the payment group.
        "400":
          description: "Invalid input, unable to validate the payment group."
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Payment Groups
      security:
        - bearer: []
  /checkout-sessions:
    post:
      operationId: CheckoutSessionsController_create
      summary: Create a new checkout session.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCheckoutSessionDto"
      responses:
        "201":
          description: The checkout session has been successfully created.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: API key is not Valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "404":
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - CheckoutSessionsAPI
      security:
        - basic:
            - username
        - basic: []
    get:
      operationId: CheckoutSessionsController_findAll
      summary: Retrieve all checkout sessions for the current organization and livemode.
      parameters: []
      responses:
        "200":
          description: A list of checkout sessions has been retrieved.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "404":
          description: Not Found Endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - CheckoutSessionsAPI
      security:
        - bearer: []
  "/checkout-sessions/{id}":
    get:
      operationId: CheckoutSessionsController_findOne
      summary: Retrieve a checkout session by ID for the current organization and livemode.
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the checkout session to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: The checkout session has been retrieved.
        "404":
          description: Checkout session not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      tags:
        - CheckoutSessionsAPI
      security:
        - bearer: []
  "/checkout-sessions/{id}/expire":
    patch:
      operationId: CheckoutSessionsController_expire
      summary: Expire a checkout session by ID for the current organization and livemode.
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the checkout session to expire.
          schema:
            type: string
      responses:
        "200":
          description: The checkout session has been expired.
        "404":
          description: Checkout session not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
      tags:
        - CheckoutSessionsAPI
      security:
        - bearer: []
  "/payment-group-settings/{id}":
    get:
      operationId: PaymentGroupSettingsController_findOne
      summary: Retrieve payment group settings by ID.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: The payment group settings have been retrieved.
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "404":
          description: Payment group settings not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - PaymentGroupSettingsAPI
      security:
        - bearer: []
    patch:
      operationId: PaymentGroupSettingsController_update
      summary: Update payment group settings by ID.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentGroupSettingsDto"
      responses:
        "200":
          description: The payment group settings have been updated.
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "404":
          description: Payment group settings not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - PaymentGroupSettingsAPI
      security:
        - bearer: []
info:
  title: kohortPay
  description: "KohortPay is a revolutionary payment method transforming the checkout experience. This API documentation provides comprehensive details about the various endpoints, allowing developers to integrate KohortPay seamlessly into their applications."
  version: 0.1.0
  contact: {}
tags: []
servers:
  - url: "https://api.kohortpay.dev"
    description: staging
  - url: "http://localhost:3000/"
    description: Development
  - url: "https://api.kohortpay.com"
    description: Production
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
    basic:
      type: http
      scheme: basic
  schemas:
    Error:
      type: object
      properties: {}
    CreateAddressDto:
      type: object
      properties: {}
    UpdateOrganizationDto:
      type: object
      properties:
        deletedAt:
          format: date-time
          type: string
          nullable: true
        stripeId:
          type: string
          nullable: true
        address:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/CreateAddressDto"
        payoutInterval:
          type: string
        payoutAnchorWeekly:
          type: object
          nullable: true
        payoutAnchorMonthly:
          type: number
          nullable: true
        stripeDashboardUrl:
          type: string
          nullable: true
    CreateDiscountLevelDto:
      type: object
      properties:
        level:
          type: number
          description: The level of discount.
          example: 1
        value:
          type: number
          description: The value of discount.
          example: 10.5
        participantsToUnlock:
          type: number
          description: The number of participants required to unlock this discount level.
          example: 3
      required:
        - level
        - value
        - participantsToUnlock
    UpdatePaymentGroupSettingsDto:
      type: object
      properties:
        discountType:
          type: string
          description: The type of discount.
          enum:
            - AMOUNT
            - PERCENTAGE
        discountLevels:
          description: An array of discount levels.
          type: array
          items:
            $ref: "#/components/schemas/CreateDiscountLevelDto"
        maxParticipants:
          type: number
          description: Maximum number of participants.
          minimum: 2
          maximum: 1000
        minutesDuration:
          type: number
          description: Duration in minutes.
          minimum: 1
          maximum: 10080
        minPurchaseValue:
          type: number
          description: Minimum purchase value.
          minimum: 3000
    ErrorDetail:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        code:
          type: string
      required:
        - type
        - message
        - code
    BadRequestResponse:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/ErrorDetail"
      required:
        - error
    UpdateCheckoutSettingsDto:
      type: object
      properties: {}
    CreatePaymentIntentDto:
      type: object
      properties:
        amount:
          type: number
          description: The amount to be charged.
          example: 5000
        checkoutSessionId:
          type: string
          description: Checkout Session  id of the payment intent
          example: cs_1abc2def3ghi
        customerId:
          type: string
          description: Customer id of the payment intent
          example: cus_1abc2def3ghi
          nullable: true
        metadata:
          type: object
          description: Status of the payment intent
        status:
          type: string
          description: Status of the payment intent
          enum:
            - CANCELED
            - PROCESSING
            - REQUIRES_PAYMENT_METHOD
            - REQUIRES_CONFIRMATION
            - REQUIRES_ACTION
            - REQUIRES_CAPTURE
            - SUCCEEDED
          example: REQUIRES_PAYMENT_METHOD
      required:
        - amount
        - checkoutSessionId
    CreatePaymentGroupDto:
      type: object
      properties:
        customerId:
          type: string
        paymentIntentId:
          type: string
        metadata:
          type: object
        expiresAt:
          format: date-time
          type: string
      required:
        - customerId
        - paymentIntentId
    UpdatePaymentGroupDto:
      type: object
      properties: {}
    ValidatePaymentGroupDto:
      type: object
      properties:
        customerEmail:
          type: string
      required:
        - customerEmail
    CreateLineItemDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the item.
          example: Item Name
        price:
          type: number
          description: The price of the item.
          example: 100
        quantity:
          type: number
          description: The quantity of the item.
          example: 1
        imageUrl:
          type: string
          description: The URL of the item image.
          example: "https://example.com/image.jpg"
          nullable: true
        description:
          type: string
          description: The description of the item.
          example: Item Description
          nullable: true
      required:
        - name
        - price
        - quantity
    CreateCheckoutSessionDto:
      type: object
      properties:
        successUrl:
          type: string
          description: The URL to redirect the user to upon successful payment.
          example: "https://success.example.com"
        cancelUrl:
          type: string
          description: The URL to redirect the user to upon cancellation of payment.
          example: "https://cancel.example.com"
        customerEmail:
          type: string
          description: The email of the customer.
          example: customer@example.com
        customerFirstName:
          type: string
          description: The firstName of the customer.
          example: John
        customerLastName:
          type: string
          description: The lastName of the customer.
          example: Doe
        customerId:
          type: string
          description: The unique id of the customer
          example: user_xxxxxxxxxxxxxxxx
        expiresAt:
          format: date-time
          type: string
          description: The expiration date of the checkout session.
          example: "2023-10-02T14:30:00.000Z"
        lineItems:
          description: List of items in the checkout session.
          type: array
          items:
            $ref: "#/components/schemas/CreateLineItemDto"
        metadata:
          type: object
          description: Additional metadata for the checkout session.
          example:
            key: value
      required:
        - lineItems
    NotFoundException:
      type: object
      properties: {}
